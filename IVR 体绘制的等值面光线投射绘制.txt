//IVR 体绘制的等值面光线投射绘制
#include <iostream>
#include "vtkDICOMImageReader.h"
#include "vtkImageCast.h"
#include "vtkPiecewiseFunction.h"
#include "vtkColorTransferFunction.h"
#include "vtkCamera.h"
#include "vtkVolumeRayCastIsosurfaceFunction.h"
#include "vtkVolumeRayCastMapper.h"
#include "vtkVolumeProperty.h"
#include "vtkRenderWindowInteractor.h"
#include "vtkRenderer.h"
#include "vtkRenderWindow.h"
#include "vtkInteractorStyleTrackballCamera.h"

int main()
{
	//读取DICOM数据
	vtkDICOMImageReader   *reader =  vtkDICOMImageReader::New();
	//reader->SetData
	//	SetDataDimensions(64,64);//设置图像分辨率
	reader->SetDataByteOrderToLittleEndian();//设置图像数据的字端序转换成小字端序
	reader->SetDirectoryName("D://DicomImages/Shoulder/");
	reader->SetDataSpacing(1.0,1.0,0.48);//设置图像像素间距和序列间距
	reader->SetDataOrigin(0.0, 0.0, 0.0);//设置基准点
	
	
	vtkImageCast *cast=vtkImageCast::New();
	cast->SetInput((vtkDataObject *)reader->GetOutput( ));
	cast->SetOutputScalarTypeToUnsignedShort ();
	cast->ClampOverflowOn();


	//不透明度的传值函数
	vtkPiecewiseFunction *opacityTransferFunction = vtkPiecewiseFunction::New();
	opacityTransferFunction->AddPoint(0, 0.0);
	opacityTransferFunction->AddPoint(500, 0.0);
	opacityTransferFunction->AddSegment (600, 0.73, 900, 0.9);
	opacityTransferFunction->AddPoint(1300, 2.0);

	//设置颜色传递函数
	vtkColorTransferFunction *colorTransferFunction = vtkColorTransferFunction::New();
	colorTransferFunction->AddRGBPoint(0, 0, 0, 0);//此处颜色设置为灰度值
	colorTransferFunction->AddRGBPoint(500, 0.1, 0.1, 0.1);
	colorTransferFunction->AddRGBPoint(600, 0.7, 0.7, 0.7);
	colorTransferFunction->AddRGBPoint(900, 0.85, 0.85, 0.85);
	colorTransferFunction->AddRGBPoint(1300, 1.0, 1.0, 1.0);


	//设置梯度传递函数
	vtkPiecewiseFunction *gradientTransferFunction = vtkPiecewiseFunction::New();
	gradientTransferFunction->AddPoint(0, 2.0);
	gradientTransferFunction->AddPoint(500, 2.0);
	gradientTransferFunction-> AddSegment (600, 0.73, 900, 0.9);
	gradientTransferFunction->AddPoint(1300, 0.1);


	//等值面光线投射算法
	vtkVolumeRayCastIsosurfaceFunction *func =vtkVolumeRayCastIsosurfaceFunction::New();
	func->SetIsoValue(680);

	
	//设定一个体绘容器的属性
	vtkVolumeProperty *volumeProperty = vtkVolumeProperty::New();
	volumeProperty->SetColor(colorTransferFunction);//设置颜色
	volumeProperty->SetScalarOpacity(opacityTransferFunction);//不透明度
	volumeProperty->SetGradientOpacity(gradientTransferFunction);
	volumeProperty->ShadeOn();//影阴
	volumeProperty->SetInterpolationTypeToLinear();//直线与样条插值之间转换函数
	volumeProperty->SetAmbient(0.2);//环境光系数
	volumeProperty->SetDiffuse(0.9);//漫反射
	volumeProperty->SetSpecular(0.2);//高光系数
	volumeProperty->SetSpecularPower(10); //高光强度


	//设置属性的采样与合成
	vtkVolumeRayCastMapper *volumeMapper = vtkVolumeRayCastMapper::New();   //体绘制器
	volumeMapper->SetVolumeRayCastFunction(func); //载入绘制方法
	volumeMapper->SetInputConnection(cast->GetOutputPort());//图像数据输入
	
	
	
	//定义Volume
	vtkVolume *volume = vtkVolume::New();//表示透示图中的一组三维数据
	volume->SetMapper(volumeMapper);
	volume->SetProperty(volumeProperty);//设置体属性



vtkCamera *aCamera3D=vtkCamera::New() ;
	aCamera3D->SetViewUp(0,0,-1) ;
	aCamera3D->SetPosition(0,1,0) ;
	aCamera3D->SetFocalPoint(0,0,0) ;
	aCamera3D->ComputeViewPlaneNormal() ;



	vtkRenderer *ren = vtkRenderer::New();//设置绘制者(绘制对象指针)
	ren->AddVolume(volume);//将Volume装载到绘制类中
	ren->SetActiveCamera(aCamera3D) ;
	ren->ResetCamera() ;
	aCamera3D->Dolly(1.5) ;	
	ren->SetBackground(0, 0, 0);
	ren->SetViewport(0.0,0.0,1.0,1.0);



	vtkRenderWindow *renWin = vtkRenderWindow::New();//设置绘制窗口
	renWin->AddRenderer(ren);//将绘制者加入绘制窗口
	ren->ResetCameraClippingRange() ;
	vtkRenderWindowInteractor *iren = vtkRenderWindowInteractor::New();//设置绘制交互操作窗口
	iren->SetRenderWindow(renWin);//将绘制窗口添加到交互窗口
	vtkInteractorStyleTrackballCamera *style = vtkInteractorStyleTrackballCamera::New();//交互摄像机
	iren->SetInteractorStyle(style);//style为交互模式
	renWin->SetSize(600, 600);//设置背景颜色和绘制窗口大小
	renWin->Render();////窗口进行绘制
	
	
	iren->Initialize();
	iren->Start();//初始化并进行交互绘制
	
	ren->ResetCameraClippingRange ();
	volumeMapper->Delete();//释放类存
	// readerImageCast->Delete();
	iren->Delete();
	ren->Delete();
	renWin->Delete();
	aCamera3D->Delete();
	opacityTransferFunction->Delete();
	volumeProperty->Delete();;
	volume->Delete();
	colorTransferFunction->Delete();
	return 0;

}
